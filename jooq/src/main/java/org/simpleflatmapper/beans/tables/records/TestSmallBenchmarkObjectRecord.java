/**
 * This class is generated by jOOQ
 */
package org.simpleflatmapper.beans.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.simpleflatmapper.beans.tables.TestSmallBenchmarkObject;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSmallBenchmarkObjectRecord extends UpdatableRecordImpl<TestSmallBenchmarkObjectRecord> implements Record4<Long, String, String, Integer> {

	private static final long serialVersionUID = -1497952113;

	/**
	 * Setter for <code>sfm.test_small_benchmark_object.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>sfm.test_small_benchmark_object.id</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>sfm.test_small_benchmark_object.name</code>.
	 */
	public void setName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>sfm.test_small_benchmark_object.name</code>.
	 */
	public String getName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>sfm.test_small_benchmark_object.email</code>.
	 */
	public void setEmail(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>sfm.test_small_benchmark_object.email</code>.
	 */
	public String getEmail() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>sfm.test_small_benchmark_object.year_started</code>.
	 */
	public void setYearStarted(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>sfm.test_small_benchmark_object.year_started</code>.
	 */
	public Integer getYearStarted() {
		return (Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, String, Integer> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, String, Integer> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT.EMAIL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT.YEAR_STARTED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getEmail();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getYearStarted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObjectRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObjectRecord value2(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObjectRecord value3(String value) {
		setEmail(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObjectRecord value4(Integer value) {
		setYearStarted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObjectRecord values(Long value1, String value2, String value3, Integer value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	@Override
	public Long component1() {
		return value1();
	}

	@Override
	public String component2() {
		return value2();
	}

	@Override
	public String component3() {
		return value3();
	}

	@Override
	public Integer component4() {
		return value4();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TestSmallBenchmarkObjectRecord
	 */
	public TestSmallBenchmarkObjectRecord() {
		super(TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT);
	}

	/**
	 * Create a detached, initialised TestSmallBenchmarkObjectRecord
	 */
	public TestSmallBenchmarkObjectRecord(Long id, String name, String email, Integer yearStarted) {
		super(TestSmallBenchmarkObject.TEST_SMALL_BENCHMARK_OBJECT);

		setValue(0, id);
		setValue(1, name);
		setValue(2, email);
		setValue(3, yearStarted);
	}
}
