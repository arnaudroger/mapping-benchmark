/**
 * This class is generated by jOOQ
 */
package org.simpleflatmapper.beans.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.simpleflatmapper.beans.Keys;
import org.simpleflatmapper.beans.tables.records.TestSmallBenchmarkObjectRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSmallBenchmarkObject extends TableImpl<TestSmallBenchmarkObjectRecord> {

	private static final long serialVersionUID = 1741374422;

	/**
	 * The reference instance of <code>sfm.test_small_benchmark_object</code>
	 */
	public static final TestSmallBenchmarkObject TEST_SMALL_BENCHMARK_OBJECT = new TestSmallBenchmarkObject();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TestSmallBenchmarkObjectRecord> getRecordType() {
		return TestSmallBenchmarkObjectRecord.class;
	}

	/**
	 * The column <code>sfm.test_small_benchmark_object.id</code>.
	 */
	public final TableField<TestSmallBenchmarkObjectRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>sfm.test_small_benchmark_object.name</code>.
	 */
	public final TableField<TestSmallBenchmarkObjectRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>sfm.test_small_benchmark_object.email</code>.
	 */
	public final TableField<TestSmallBenchmarkObjectRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>sfm.test_small_benchmark_object.year_started</code>.
	 */
	public final TableField<TestSmallBenchmarkObjectRecord, Integer> YEAR_STARTED = createField("YEAR_STARTED", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>sfm.test_small_benchmark_object</code> table reference
	 */
	public TestSmallBenchmarkObject() {
		this("TEST_SMALL_BENCHMARK_OBJECT", null);
	}

	/**
	 * Create an aliased <code>sfm.test_small_benchmark_object</code> table reference
	 */
	public TestSmallBenchmarkObject(String alias) {
		this(alias, TEST_SMALL_BENCHMARK_OBJECT);
	}

	private TestSmallBenchmarkObject(String alias, Table<TestSmallBenchmarkObjectRecord> aliased) {
		this(alias, aliased, null);
	}

	private TestSmallBenchmarkObject(String alias, Table<TestSmallBenchmarkObjectRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TestSmallBenchmarkObjectRecord> getPrimaryKey() {
		return Keys.KEY_TEST_SMALL_BENCHMARK_OBJECT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TestSmallBenchmarkObjectRecord>> getKeys() {
		return Arrays.<UniqueKey<TestSmallBenchmarkObjectRecord>>asList(Keys.KEY_TEST_SMALL_BENCHMARK_OBJECT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestSmallBenchmarkObject as(String alias) {
		return new TestSmallBenchmarkObject(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TestSmallBenchmarkObject rename(String name) {
		return new TestSmallBenchmarkObject(name, null);
	}
}
